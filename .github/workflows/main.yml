# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  testing_code:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2 
         
      - name: Initing Java from GitHub Actions
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
        
      - name: Initing Flutter action
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '1.22.5'
      # Runs a single command using the runners shell and getting the dependencies
      - name: Get Flutter pubs
        run: flutter pub get
      
      # Running the test
      - name: Test flutter code
        run: flutter test
  create_release:
    # The type of runner that the job will run on
    name: creating a release
    runs-on: ubuntu-latest
    needs: [testing_code]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Initing Java from GitHub Actions
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
        
      - name: Initing Flutter action
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '1.22.5'

      # Building an apk
      - name: build the android apk file
        run: flutter build apk --split-per-abi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release 1 ${{ github.ref }}
          draft: false
          prerelease: false
      - name: checking where i am
        run: |
          pwd
          ls -lsa 
          cd build/app/outputs/flutter-apk
          ls -lsa
          pwd
      - name: Upload Release Asset android-arm # uploading the arm
        id: upload-release-asset-android-arm 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          asset_name: app-release-armabi-${{ github.event.head_commit.message }}.apk
          asset_content_type: application/zip
      - name: Upload Release Asset android-arm64 #uploading the arm64
        id: upload-release-asset-android-arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          asset_name: app-release-arm64-${{ github.event.head_commit.message }}.apk
          asset_content_type: application/zip
      - name: Upload Release Asset android-x64 #uploading the android x64
        id: upload-release-asset-android-x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build/app/outputs/flutter-apk/app-x86_64-release.apk
          asset_name: app-release-x86_64-${{ github.event.head_commit.message }}.apk
          asset_content_type: application/zip


    
